blueprint:
  name: Zaptec EV Charger Balancing
  description: >
    # Zaptec Installation Load Balancing
  
    Automating 3 phase load balancing for a Zaptec EV home charger by monitoring your local HAN meter.
  
    ## Requirements
  
    - Most important is, you need to understand what you are into before using this blueprint!
  
    - You need the Zaptec integration minimum version 0.7.0
  
    - You need a local HAN meter or similar power meter feed into your Home Assistant
  
    ## How it works
  
    The automation will monitor your current draw and compares it to your main fuse and charger fuse. The charger will be given as much current as possible without over charging fuses. 
  
    While normal operation, the charger is held as high as possible. If there is a power spike, the charger is lowered to a safe level. If the charge current can not stay above 6 A the charger will be halted (according to standards). Charging limits will be raised when it can be done.
  
    Important! Read all the details at https://bit.ly/zaptec-ha-load-balancing before use!
  
    Version 2024-01-05
  domain: automation
  author: https://github.com/svenakela
  source_url: https://github.com/svenakela/ha/blob/main/zaptec/charger-balancing-blueprint.yaml

  input:
    input_main_current_l1:
      name: Current L1
      description: Current sensor for main line phase 1. This is something like current_l1 from a HAN meter.
      selector:
        entity:
          filter:
            - domain: sensor
            - device_class: energy
    input_main_current_l2:
      name: Current L2
      description: Current sensor for main line phase 2. This is something like current_l2 from a HAN meter.
      selector:
        entity:
          filter:
            - domain: sensor
            - device_class: energy
    input_main_current_l3:
      name: Current L3
      description: Current sensor for main line phase 3. This is something like current_l3 from a HAN meter.
      selector:
        entity:
          filter:
            - domain: sensor
            - device_class: energy
    input_main_fuse:
      name: Main Fuse Limit
      description: Set the max current draw on your main fuse. Read the details https://bit.ly/zaptec-main-fuse
      default: 20
      selector:
        number:
          min: 16
          max: 32
          unit_of_measurement: "A"
    input_safe_buffer:
      name: Current Limit Main Safe Buffer
      description: Buffer making the balancing resiliant to changes close to max current. The default 2 works for almost all situations. Read the details http://bit.ly/zaptec-safe-buffer
      default: 2
      selector:
        number:
          min: 0
          max: 5
          unit_of_measurement: "A"
    input_charger_fuse:
      name: Charger Fuse Limit  
      description: Set the max current for the charger fuse. MUST be lower than the main fuse (or the automation will halt). Read the details https://bit.ly/zaptec-fuse-limit
      default: 16
      selector:
        number:
          min: 12
          max: 25
          unit_of_measurement: "A"
    input_charger_safe_buffer:
      name: Current Limit Charger Safe Buffer
      description: Safety buffer for the charger fuses. Increasing this value will lower the max limit for the charger (fuse-buffer). The default 1 works for almost all situations Read the details http://bit.ly/zaptec-safe-buffer
      default: 1
      selector:
        number:
          min: 0
          max: 5
          unit_of_measurement: "A"
trigger:
- platform: time_pattern
  seconds: /20
action:
- variables:
    _main_current_l1: !input input_main_current_l1
    _main_current_l2: !input input_main_current_l2
    _main_current_l3: !input input_main_current_l3
    _main_fuse: !input input_main_fuse
    _charger_fuse: !input input_charger_fuse
    _safe_buffer: !input input_safe_buffer 
    _charger_safe_buffer: !input input_charger_safe_buffer
    my_device_id: '{{ integration_entities(''zaptec'') | first | device_id }}'
    number_avail_curr: '{{ integration_entities(''zaptec'') | select(''match'', ''number.*available_current'') | first }}'
    sensor_charger_mode: '{{ integration_entities(''zaptec'') | select(''match'', ''sensor.*_charger_mode'') | first }}'
    binary_sensor_installation: '{{ integration_entities(''zaptec'') | select(''match'', ''binary_sensor.*_installation'') | first }}'
- service: zaptec.limit_current
  data:
    device_id: '{{ my_device_id }}'
    available_current: >-
      {% set main_fuse       = _main_fuse|float(0.0) %}
      {% set charger_fuse    = _charger_fuse|float(0.0) %}
      {% set safe_buffer     = _safe_buffer|float(2.0) %}
      {% set charger_safe_buffer = _charger_safe_buffer|float(1.0) %}
      {% set min_start_limit = 6|int %}
      {% set main_safe_level = main_fuse - safe_buffer %}
      {% set charger_safe_level = charger_fuse - charger_safe_buffer %}
      {% set charger_state = states(sensor_charger_mode) %}
      {% set charger_limit = states(number_avail_curr)|float(0) %}
      {% set current = [states(_main_current_l1),
                        states(_main_current_l2),
                        states(_main_current_l3)]|max|float(0) %}
      {% set updated_on = as_datetime(state_attr(binary_sensor_installation, 'updated_on')) %}
      {% set updates_ok = utcnow().replace(tzinfo=None) - updated_on > timedelta(minutes=5) %}
      {% set limit = charger_limit %}
      {% set prio = 666 %}
      
      {# Priority limiting #}
      {% if charger_state == 'Charging' %}
        {# Are we about to blow a fuse? #}
        {% if current > main_fuse or charger_limit > charger_fuse %}
          {% set main_max = (charger_limit - (current - main_fuse))|int %}
          {% set my_max = (charger_limit - (charger_limit - charger_fuse))|int %}
          {# Stay above 6 A or stop charging #}
          {% set prio = 0|int if main_max < min_start_limit 
              or my_max < min_start_limit else [main_max, my_max]|min %}
        {% endif %}
      {% endif %}
      
      {# Ordinary limiting #}
      {% if (charger_state == 'Charging' and updates_ok)
          or charger_state == 'Waiting' %}
        {# Been zeroed and need to restart when main_fuse allows #}
        {% set _max_pow = limit + (main_safe_level - current)|int %}
        {% set _no_pow  = 0 if _max_pow < min_start_limit else 666 %}
        {% set limit = [_no_pow, _max_pow, charger_safe_level]|min %}
      {% endif %}
      
      {% if charger_state == 'Charge done' 
         or charger_state == 'Disconnected' 
         or charger_state == 'Unknown' %}
        {# We are not charging, go to zero #}
        {% set limit = 0 %}
      {% endif %}
      {# The devil is in the details. Are we on 666 we do have an error #}
      {{ [prio|int if prio != 666 else limit|int, 0]|max }}
mode: single
